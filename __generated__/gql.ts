/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query EventData($id: bigint!) {\n      event: events_by_pk(id: $id) {\n        id\n        name\n        type\n        is_comp\n        center {\n          id\n          name\n          short_name\n        }\n        games_aggregate {\n          aggregate {\n            max {\n              game_datetime\n            }\n          }\n        }\n        games {\n          id\n          tdf_id: tdf_key\n          mission_start: game_datetime\n          mission_length: duration\n          name: game_name\n          winner\n          scorecards {\n            id\n            player {\n              id\n              player_name\n              ipl_id\n            }\n            game {\n              id\n              tdf_id: tdf_key\n              mission_start: game_datetime\n              mission_length: duration\n              name: game_name\n              winner\n            }\n            team\n            position\n            survived\n            shots_hit\n            shots_fired\n            times_zapped\n            times_missiled\n            missile_hits\n            nukes_activated\n            nukes_detonated\n            nukes_canceled\n            medic_hits\n            own_medic_hits\n            medic_nukes\n            scout_rapid\n            life_boost\n            ammo_boost\n            lives_left\n            score\n            max_score\n            shots_left\n            penalty_count\n            shot_3hit\n            elim_other_team\n            team_elim\n            own_nuke_cancels\n            shot_opponent\n            shot_team\n            missiled_opponent\n            missiled_team\n            resupplies\n            rank\n            bases_destroyed\n            accuracy\n            hit_diff\n            mvp: mvp_points\n            mvp_details\n            sp_earned\n            sp_spent\n            type\n            is_sub\n            uptime\n            resupply_downtime\n            other_downtime\n            shots_fired_during_rapid\n            shots_hit_during_rapid\n            shot_opponent_during_rapid\n            shot_team_during_rapid\n            times_team_missiled\n          }\n        }\n      }\n    }\n  ": types.EventDataDocument,
    "\n      query CenterMetaData($id: bigint!) {\n        center: centers_by_pk(id: $id) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    ": types.CenterMetaDataDocument,
    "\n      query AllCenterMetaData {\n        centers(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n        ) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    ": types.AllCenterMetaDataDocument,
    "\n      query EventMetaData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    ": types.EventMetaDataDocument,
    "\n      query getRecentEvents {\n        events(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n          limit: 10\n        ) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    ": types.GetRecentEventsDocument,
    "\n      query EventData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n          games {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: duration\n            name: game_name\n            winner\n            scorecards {\n              id\n              player {\n                id\n                player_name\n                ipl_id\n              }\n              game {\n                id\n                tdf_id: tdf_key\n                mission_start: game_datetime\n                mission_length: duration\n                name: game_name\n                winner\n              }\n              team\n              position\n              survived\n              shots_hit\n              shots_fired\n              times_zapped\n              times_missiled\n              missile_hits\n              nukes_activated\n              nukes_detonated\n              nukes_canceled\n              medic_hits\n              own_medic_hits\n              medic_nukes\n              scout_rapid\n              life_boost\n              ammo_boost\n              lives_left\n              score\n              max_score\n              shots_left\n              penalty_count\n              shot_3hit\n              elim_other_team\n              team_elim\n              own_nuke_cancels\n              shot_opponent\n              shot_team\n              missiled_opponent\n              missiled_team\n              resupplies\n              rank\n              bases_destroyed\n              accuracy\n              hit_diff\n              mvp: mvp_points\n              mvp_details\n              sp_earned\n              sp_spent\n              type\n              is_sub\n              uptime\n              resupply_downtime\n              other_downtime\n              shots_fired_during_rapid\n              shots_hit_during_rapid\n              shot_opponent_during_rapid\n              shot_team_during_rapid\n              times_team_missiled\n            }\n          }\n        }\n      }\n    ": types.EventDataDocument,
    "\n      query RecentGames {\n        game(order_by: { mission_start: desc }, limit: 10) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    ": types.RecentGamesDocument,
    "\n      query GameMetaData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    ": types.GameMetaDataDocument,
    "\n      query GameData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n          game_teams {\n            color_desc\n            color_enum\n            ui_color\n            team_desc\n            team_index\n            score\n            game_entities {\n              battlesuit\n              category\n              end_code\n              end_time\n              entity_level\n              entity_type\n              entity_desc\n              id\n              ipl_id\n              player_id\n              position\n              start_time\n              score\n              player {\n                current_alias\n                ipl_id\n              }\n              game_entity_state_final: v_game_entity_state_final {\n                accuracy\n                accuracy_during_rapid\n                ammo_boost_received\n                ammo_boosts\n                ammo_boosted_players\n                assists\n                assists_during_rapid\n                cancel_opponent_nuke\n                cancel_team_nuke\n                current_hp\n                cancel_team_nuke_by_resupply\n                deac_3hit\n                deac_3hit_during_rapid\n                deac_opponent_during_rapid\n                deac_opponent\n                deac_team\n                destroy_base\n                deac_team_during_rapid\n                entity_id\n                hit_diff\n                hit_diff_during_rapid\n                id\n                is_active\n                is_eliminated\n                is_final\n                is_nuking\n                is_rapid\n                last_deac_time\n                last_deac_type\n                life_boost_received\n                life_boosted_players\n                life_boosts\n                lives\n                medic_hits\n                medic_hits_during_rapid\n                miss_base\n                missile_base\n                missile_opponent\n                missile_team\n                missiles_left\n                mvp\n                mvp_details\n                nuke_downtime\n                nuke_medic_hits\n                nukes_activated\n                nukes_detonated\n                opp_deac_downtime\n                own_medic_hits\n                own_nuke_canceled_by_game_end\n                own_nuke_canceled_by_nuke\n                own_nuke_canceled_by_opponent\n                own_nuke_canceled_by_penalty\n                own_nuke_canceled_by_resupply\n                own_nuke_canceled_by_team\n                penalties\n                penalty_downtime\n                rapid_fires\n                resupply_downtime\n                resupply_lives\n                resupply_shots\n                score\n                self_deac\n                self_deac_during_rapid\n                self_hit\n                self_hit_during_rapid\n                self_missile\n                self_missile_during_rapid\n                self_resupply_lives\n                self_resupply_shots\n                shot_3hit\n                shot_3hit_during_rapid\n                shot_base\n                shot_opponent\n                shot_opponent_during_rapid\n                shot_team\n                shot_team_during_rapid\n                shots\n                shots_fired\n                shots_fired_during_rapid\n                shots_hit\n                shots_hit_during_rapid\n                sp_earned\n                sp_spent\n                state_time\n                team_deac_downtime\n                times_missiled\n                uptime\n              }\n            }\n          }\n        }\n      }\n    ": types.GameDataDocument,
    "\n  query Replay($tdfId: String!) {\n    game(where: { tdf_id: { _eq: $tdfId } }) {\n      id\n      tdf_id\n      mission_start\n      mission_length\n      chomper_version\n      center {\n        name\n      }\n      game_actions(order_by: { action_time: asc_nulls_first }) {\n        action_text\n        action_time\n        action_type\n        target: gameEntityByTargetGameEntityId {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n        actor: game_entity {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n      }\n      game_teams {\n        color_desc\n        color_enum\n        ui_color\n        team_desc\n        team_index\n        score\n        game_entities {\n          battlesuit\n          category\n          # eliminated\n          end_code\n          end_time\n          entity_level\n          entity_type\n          entity_desc\n          id\n          ipl_id\n          player_id\n          position\n          start_time\n          score\n          player {\n            current_alias\n            ipl_id\n          }\n          game_entity_states: v_game_entity_states(\n            order_by: { state_time: asc_nulls_first }\n          ) {\n            accuracy\n            accuracy_during_rapid\n            ammo_boost_received\n            ammo_boosts\n            ammo_boosted_players\n            assists\n            assists_during_rapid\n            cancel_opponent_nuke\n            cancel_team_nuke\n            current_hp\n            cancel_team_nuke_by_resupply\n            deac_3hit\n            deac_3hit_during_rapid\n            deac_opponent_during_rapid\n            deac_opponent\n            deac_team\n            destroy_base\n            deac_team_during_rapid\n            entity_id\n            hit_diff\n            hit_diff_during_rapid\n            id\n            is_active\n            is_eliminated\n            is_final\n            is_nuking\n            is_rapid\n            last_deac_time\n            last_deac_type\n            life_boost_received\n            life_boosted_players\n            life_boosts\n            lives\n            medic_hits\n            medic_hits_during_rapid\n            miss_base\n            missile_base\n            missile_opponent\n            missile_team\n            missiles_left\n            mvp\n            mvp_details\n            nuke_downtime\n            nuke_medic_hits\n            nukes_activated\n            nukes_detonated\n            opp_deac_downtime\n            own_medic_hits\n            own_nuke_canceled_by_game_end\n            own_nuke_canceled_by_nuke\n            own_nuke_canceled_by_opponent\n            own_nuke_canceled_by_penalty\n            own_nuke_canceled_by_resupply\n            own_nuke_canceled_by_team\n            penalties\n            penalty_downtime\n            rapid_fires\n            resupply_downtime\n            resupply_lives\n            resupply_shots\n            score\n            self_deac\n            self_deac_during_rapid\n            self_hit\n            self_hit_during_rapid\n            self_missile\n            self_missile_during_rapid\n            self_resupply_lives\n            self_resupply_shots\n            shot_3hit\n            shot_3hit_during_rapid\n            shot_base\n            shot_opponent\n            shot_opponent_during_rapid\n            shot_team\n            shot_team_during_rapid\n            shots\n            shots_fired\n            shots_fired_during_rapid\n            shots_hit\n            shots_hit_during_rapid\n            sp_earned\n            sp_spent\n            state_time\n            team_deac_downtime\n            times_missiled\n            uptime\n          }\n        }\n      }\n    }\n  }\n": types.ReplayDocument,
    "\n      query IfReplayExists($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n        }\n      }\n    ": types.IfReplayExistsDocument,
    "\n      query SocialSimpleScorecards(\n        $start: timestamptz!\n        $end: timestamptz!\n        $centers: [bigint!]\n      ) {\n        scorecards(\n          where: {\n            type: { _eq: \"social\" }\n            game_datetime: { _gte: $start, _lte: $end }\n            center_id: { _in: $centers }\n          }\n        ) {\n          id\n          player_id\n          player {\n            id\n            ipl_id\n            player_name\n          }\n          game {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: game_length\n          }\n          position\n          score\n          mvp: mvp_points\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    ": types.SocialSimpleScorecardsDocument,
    "\n      query getSimpleScorecardByEventId($eventId: bigint!) {\n        scorecards(where: { event_id: { _eq: $eventId } }) {\n          player_id\n          player {\n            player_name\n          }\n          game {\n            center_id\n            duration\n            game_datetime\n            game_length\n            game_name\n          }\n          position\n          score\n          mvp_points\n          mvp_details\n          hit_diff\n          shot_opponent\n          times_zapped\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    ": types.GetSimpleScorecardByEventIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query EventData($id: bigint!) {\n      event: events_by_pk(id: $id) {\n        id\n        name\n        type\n        is_comp\n        center {\n          id\n          name\n          short_name\n        }\n        games_aggregate {\n          aggregate {\n            max {\n              game_datetime\n            }\n          }\n        }\n        games {\n          id\n          tdf_id: tdf_key\n          mission_start: game_datetime\n          mission_length: duration\n          name: game_name\n          winner\n          scorecards {\n            id\n            player {\n              id\n              player_name\n              ipl_id\n            }\n            game {\n              id\n              tdf_id: tdf_key\n              mission_start: game_datetime\n              mission_length: duration\n              name: game_name\n              winner\n            }\n            team\n            position\n            survived\n            shots_hit\n            shots_fired\n            times_zapped\n            times_missiled\n            missile_hits\n            nukes_activated\n            nukes_detonated\n            nukes_canceled\n            medic_hits\n            own_medic_hits\n            medic_nukes\n            scout_rapid\n            life_boost\n            ammo_boost\n            lives_left\n            score\n            max_score\n            shots_left\n            penalty_count\n            shot_3hit\n            elim_other_team\n            team_elim\n            own_nuke_cancels\n            shot_opponent\n            shot_team\n            missiled_opponent\n            missiled_team\n            resupplies\n            rank\n            bases_destroyed\n            accuracy\n            hit_diff\n            mvp: mvp_points\n            mvp_details\n            sp_earned\n            sp_spent\n            type\n            is_sub\n            uptime\n            resupply_downtime\n            other_downtime\n            shots_fired_during_rapid\n            shots_hit_during_rapid\n            shot_opponent_during_rapid\n            shot_team_during_rapid\n            times_team_missiled\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query EventData($id: bigint!) {\n      event: events_by_pk(id: $id) {\n        id\n        name\n        type\n        is_comp\n        center {\n          id\n          name\n          short_name\n        }\n        games_aggregate {\n          aggregate {\n            max {\n              game_datetime\n            }\n          }\n        }\n        games {\n          id\n          tdf_id: tdf_key\n          mission_start: game_datetime\n          mission_length: duration\n          name: game_name\n          winner\n          scorecards {\n            id\n            player {\n              id\n              player_name\n              ipl_id\n            }\n            game {\n              id\n              tdf_id: tdf_key\n              mission_start: game_datetime\n              mission_length: duration\n              name: game_name\n              winner\n            }\n            team\n            position\n            survived\n            shots_hit\n            shots_fired\n            times_zapped\n            times_missiled\n            missile_hits\n            nukes_activated\n            nukes_detonated\n            nukes_canceled\n            medic_hits\n            own_medic_hits\n            medic_nukes\n            scout_rapid\n            life_boost\n            ammo_boost\n            lives_left\n            score\n            max_score\n            shots_left\n            penalty_count\n            shot_3hit\n            elim_other_team\n            team_elim\n            own_nuke_cancels\n            shot_opponent\n            shot_team\n            missiled_opponent\n            missiled_team\n            resupplies\n            rank\n            bases_destroyed\n            accuracy\n            hit_diff\n            mvp: mvp_points\n            mvp_details\n            sp_earned\n            sp_spent\n            type\n            is_sub\n            uptime\n            resupply_downtime\n            other_downtime\n            shots_fired_during_rapid\n            shots_hit_during_rapid\n            shot_opponent_during_rapid\n            shot_team_during_rapid\n            times_team_missiled\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query CenterMetaData($id: bigint!) {\n        center: centers_by_pk(id: $id) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query CenterMetaData($id: bigint!) {\n        center: centers_by_pk(id: $id) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query AllCenterMetaData {\n        centers(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n        ) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query AllCenterMetaData {\n        centers(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n        ) {\n          id\n          name\n          short_name\n          games_aggregate(where: { type: { _eq: \"social\" } }) {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query EventMetaData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query EventMetaData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getRecentEvents {\n        events(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n          limit: 10\n        ) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query getRecentEvents {\n        events(\n          order_by: {\n            games_aggregate: { max: { game_datetime: desc_nulls_last } }\n          }\n          limit: 10\n        ) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query EventData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n          games {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: duration\n            name: game_name\n            winner\n            scorecards {\n              id\n              player {\n                id\n                player_name\n                ipl_id\n              }\n              game {\n                id\n                tdf_id: tdf_key\n                mission_start: game_datetime\n                mission_length: duration\n                name: game_name\n                winner\n              }\n              team\n              position\n              survived\n              shots_hit\n              shots_fired\n              times_zapped\n              times_missiled\n              missile_hits\n              nukes_activated\n              nukes_detonated\n              nukes_canceled\n              medic_hits\n              own_medic_hits\n              medic_nukes\n              scout_rapid\n              life_boost\n              ammo_boost\n              lives_left\n              score\n              max_score\n              shots_left\n              penalty_count\n              shot_3hit\n              elim_other_team\n              team_elim\n              own_nuke_cancels\n              shot_opponent\n              shot_team\n              missiled_opponent\n              missiled_team\n              resupplies\n              rank\n              bases_destroyed\n              accuracy\n              hit_diff\n              mvp: mvp_points\n              mvp_details\n              sp_earned\n              sp_spent\n              type\n              is_sub\n              uptime\n              resupply_downtime\n              other_downtime\n              shots_fired_during_rapid\n              shots_hit_during_rapid\n              shot_opponent_during_rapid\n              shot_team_during_rapid\n              times_team_missiled\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query EventData($id: bigint!) {\n        event: events_by_pk(id: $id) {\n          id\n          name\n          type\n          is_comp\n          center {\n            id\n            name\n            short_name\n          }\n          games_aggregate {\n            aggregate {\n              max {\n                game_datetime\n              }\n            }\n          }\n          games {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: duration\n            name: game_name\n            winner\n            scorecards {\n              id\n              player {\n                id\n                player_name\n                ipl_id\n              }\n              game {\n                id\n                tdf_id: tdf_key\n                mission_start: game_datetime\n                mission_length: duration\n                name: game_name\n                winner\n              }\n              team\n              position\n              survived\n              shots_hit\n              shots_fired\n              times_zapped\n              times_missiled\n              missile_hits\n              nukes_activated\n              nukes_detonated\n              nukes_canceled\n              medic_hits\n              own_medic_hits\n              medic_nukes\n              scout_rapid\n              life_boost\n              ammo_boost\n              lives_left\n              score\n              max_score\n              shots_left\n              penalty_count\n              shot_3hit\n              elim_other_team\n              team_elim\n              own_nuke_cancels\n              shot_opponent\n              shot_team\n              missiled_opponent\n              missiled_team\n              resupplies\n              rank\n              bases_destroyed\n              accuracy\n              hit_diff\n              mvp: mvp_points\n              mvp_details\n              sp_earned\n              sp_spent\n              type\n              is_sub\n              uptime\n              resupply_downtime\n              other_downtime\n              shots_fired_during_rapid\n              shots_hit_during_rapid\n              shot_opponent_during_rapid\n              shot_team_during_rapid\n              times_team_missiled\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query RecentGames {\n        game(order_by: { mission_start: desc }, limit: 10) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    "): (typeof documents)["\n      query RecentGames {\n        game(order_by: { mission_start: desc }, limit: 10) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GameMetaData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GameMetaData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GameData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n          game_teams {\n            color_desc\n            color_enum\n            ui_color\n            team_desc\n            team_index\n            score\n            game_entities {\n              battlesuit\n              category\n              end_code\n              end_time\n              entity_level\n              entity_type\n              entity_desc\n              id\n              ipl_id\n              player_id\n              position\n              start_time\n              score\n              player {\n                current_alias\n                ipl_id\n              }\n              game_entity_state_final: v_game_entity_state_final {\n                accuracy\n                accuracy_during_rapid\n                ammo_boost_received\n                ammo_boosts\n                ammo_boosted_players\n                assists\n                assists_during_rapid\n                cancel_opponent_nuke\n                cancel_team_nuke\n                current_hp\n                cancel_team_nuke_by_resupply\n                deac_3hit\n                deac_3hit_during_rapid\n                deac_opponent_during_rapid\n                deac_opponent\n                deac_team\n                destroy_base\n                deac_team_during_rapid\n                entity_id\n                hit_diff\n                hit_diff_during_rapid\n                id\n                is_active\n                is_eliminated\n                is_final\n                is_nuking\n                is_rapid\n                last_deac_time\n                last_deac_type\n                life_boost_received\n                life_boosted_players\n                life_boosts\n                lives\n                medic_hits\n                medic_hits_during_rapid\n                miss_base\n                missile_base\n                missile_opponent\n                missile_team\n                missiles_left\n                mvp\n                mvp_details\n                nuke_downtime\n                nuke_medic_hits\n                nukes_activated\n                nukes_detonated\n                opp_deac_downtime\n                own_medic_hits\n                own_nuke_canceled_by_game_end\n                own_nuke_canceled_by_nuke\n                own_nuke_canceled_by_opponent\n                own_nuke_canceled_by_penalty\n                own_nuke_canceled_by_resupply\n                own_nuke_canceled_by_team\n                penalties\n                penalty_downtime\n                rapid_fires\n                resupply_downtime\n                resupply_lives\n                resupply_shots\n                score\n                self_deac\n                self_deac_during_rapid\n                self_hit\n                self_hit_during_rapid\n                self_missile\n                self_missile_during_rapid\n                self_resupply_lives\n                self_resupply_shots\n                shot_3hit\n                shot_3hit_during_rapid\n                shot_base\n                shot_opponent\n                shot_opponent_during_rapid\n                shot_team\n                shot_team_during_rapid\n                shots\n                shots_fired\n                shots_fired_during_rapid\n                shots_hit\n                shots_hit_during_rapid\n                sp_earned\n                sp_spent\n                state_time\n                team_deac_downtime\n                times_missiled\n                uptime\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GameData($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n          tdf_id\n          mission_start\n          mission_length\n          chomper_version\n          center {\n            name\n          }\n          game_teams {\n            color_desc\n            color_enum\n            ui_color\n            team_desc\n            team_index\n            score\n            game_entities {\n              battlesuit\n              category\n              end_code\n              end_time\n              entity_level\n              entity_type\n              entity_desc\n              id\n              ipl_id\n              player_id\n              position\n              start_time\n              score\n              player {\n                current_alias\n                ipl_id\n              }\n              game_entity_state_final: v_game_entity_state_final {\n                accuracy\n                accuracy_during_rapid\n                ammo_boost_received\n                ammo_boosts\n                ammo_boosted_players\n                assists\n                assists_during_rapid\n                cancel_opponent_nuke\n                cancel_team_nuke\n                current_hp\n                cancel_team_nuke_by_resupply\n                deac_3hit\n                deac_3hit_during_rapid\n                deac_opponent_during_rapid\n                deac_opponent\n                deac_team\n                destroy_base\n                deac_team_during_rapid\n                entity_id\n                hit_diff\n                hit_diff_during_rapid\n                id\n                is_active\n                is_eliminated\n                is_final\n                is_nuking\n                is_rapid\n                last_deac_time\n                last_deac_type\n                life_boost_received\n                life_boosted_players\n                life_boosts\n                lives\n                medic_hits\n                medic_hits_during_rapid\n                miss_base\n                missile_base\n                missile_opponent\n                missile_team\n                missiles_left\n                mvp\n                mvp_details\n                nuke_downtime\n                nuke_medic_hits\n                nukes_activated\n                nukes_detonated\n                opp_deac_downtime\n                own_medic_hits\n                own_nuke_canceled_by_game_end\n                own_nuke_canceled_by_nuke\n                own_nuke_canceled_by_opponent\n                own_nuke_canceled_by_penalty\n                own_nuke_canceled_by_resupply\n                own_nuke_canceled_by_team\n                penalties\n                penalty_downtime\n                rapid_fires\n                resupply_downtime\n                resupply_lives\n                resupply_shots\n                score\n                self_deac\n                self_deac_during_rapid\n                self_hit\n                self_hit_during_rapid\n                self_missile\n                self_missile_during_rapid\n                self_resupply_lives\n                self_resupply_shots\n                shot_3hit\n                shot_3hit_during_rapid\n                shot_base\n                shot_opponent\n                shot_opponent_during_rapid\n                shot_team\n                shot_team_during_rapid\n                shots\n                shots_fired\n                shots_fired_during_rapid\n                shots_hit\n                shots_hit_during_rapid\n                sp_earned\n                sp_spent\n                state_time\n                team_deac_downtime\n                times_missiled\n                uptime\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Replay($tdfId: String!) {\n    game(where: { tdf_id: { _eq: $tdfId } }) {\n      id\n      tdf_id\n      mission_start\n      mission_length\n      chomper_version\n      center {\n        name\n      }\n      game_actions(order_by: { action_time: asc_nulls_first }) {\n        action_text\n        action_time\n        action_type\n        target: gameEntityByTargetGameEntityId {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n        actor: game_entity {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n      }\n      game_teams {\n        color_desc\n        color_enum\n        ui_color\n        team_desc\n        team_index\n        score\n        game_entities {\n          battlesuit\n          category\n          # eliminated\n          end_code\n          end_time\n          entity_level\n          entity_type\n          entity_desc\n          id\n          ipl_id\n          player_id\n          position\n          start_time\n          score\n          player {\n            current_alias\n            ipl_id\n          }\n          game_entity_states: v_game_entity_states(\n            order_by: { state_time: asc_nulls_first }\n          ) {\n            accuracy\n            accuracy_during_rapid\n            ammo_boost_received\n            ammo_boosts\n            ammo_boosted_players\n            assists\n            assists_during_rapid\n            cancel_opponent_nuke\n            cancel_team_nuke\n            current_hp\n            cancel_team_nuke_by_resupply\n            deac_3hit\n            deac_3hit_during_rapid\n            deac_opponent_during_rapid\n            deac_opponent\n            deac_team\n            destroy_base\n            deac_team_during_rapid\n            entity_id\n            hit_diff\n            hit_diff_during_rapid\n            id\n            is_active\n            is_eliminated\n            is_final\n            is_nuking\n            is_rapid\n            last_deac_time\n            last_deac_type\n            life_boost_received\n            life_boosted_players\n            life_boosts\n            lives\n            medic_hits\n            medic_hits_during_rapid\n            miss_base\n            missile_base\n            missile_opponent\n            missile_team\n            missiles_left\n            mvp\n            mvp_details\n            nuke_downtime\n            nuke_medic_hits\n            nukes_activated\n            nukes_detonated\n            opp_deac_downtime\n            own_medic_hits\n            own_nuke_canceled_by_game_end\n            own_nuke_canceled_by_nuke\n            own_nuke_canceled_by_opponent\n            own_nuke_canceled_by_penalty\n            own_nuke_canceled_by_resupply\n            own_nuke_canceled_by_team\n            penalties\n            penalty_downtime\n            rapid_fires\n            resupply_downtime\n            resupply_lives\n            resupply_shots\n            score\n            self_deac\n            self_deac_during_rapid\n            self_hit\n            self_hit_during_rapid\n            self_missile\n            self_missile_during_rapid\n            self_resupply_lives\n            self_resupply_shots\n            shot_3hit\n            shot_3hit_during_rapid\n            shot_base\n            shot_opponent\n            shot_opponent_during_rapid\n            shot_team\n            shot_team_during_rapid\n            shots\n            shots_fired\n            shots_fired_during_rapid\n            shots_hit\n            shots_hit_during_rapid\n            sp_earned\n            sp_spent\n            state_time\n            team_deac_downtime\n            times_missiled\n            uptime\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Replay($tdfId: String!) {\n    game(where: { tdf_id: { _eq: $tdfId } }) {\n      id\n      tdf_id\n      mission_start\n      mission_length\n      chomper_version\n      center {\n        name\n      }\n      game_actions(order_by: { action_time: asc_nulls_first }) {\n        action_text\n        action_time\n        action_type\n        target: gameEntityByTargetGameEntityId {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n        actor: game_entity {\n          name: entity_desc\n          player_id\n          team: game_team {\n            ui_color\n          }\n        }\n      }\n      game_teams {\n        color_desc\n        color_enum\n        ui_color\n        team_desc\n        team_index\n        score\n        game_entities {\n          battlesuit\n          category\n          # eliminated\n          end_code\n          end_time\n          entity_level\n          entity_type\n          entity_desc\n          id\n          ipl_id\n          player_id\n          position\n          start_time\n          score\n          player {\n            current_alias\n            ipl_id\n          }\n          game_entity_states: v_game_entity_states(\n            order_by: { state_time: asc_nulls_first }\n          ) {\n            accuracy\n            accuracy_during_rapid\n            ammo_boost_received\n            ammo_boosts\n            ammo_boosted_players\n            assists\n            assists_during_rapid\n            cancel_opponent_nuke\n            cancel_team_nuke\n            current_hp\n            cancel_team_nuke_by_resupply\n            deac_3hit\n            deac_3hit_during_rapid\n            deac_opponent_during_rapid\n            deac_opponent\n            deac_team\n            destroy_base\n            deac_team_during_rapid\n            entity_id\n            hit_diff\n            hit_diff_during_rapid\n            id\n            is_active\n            is_eliminated\n            is_final\n            is_nuking\n            is_rapid\n            last_deac_time\n            last_deac_type\n            life_boost_received\n            life_boosted_players\n            life_boosts\n            lives\n            medic_hits\n            medic_hits_during_rapid\n            miss_base\n            missile_base\n            missile_opponent\n            missile_team\n            missiles_left\n            mvp\n            mvp_details\n            nuke_downtime\n            nuke_medic_hits\n            nukes_activated\n            nukes_detonated\n            opp_deac_downtime\n            own_medic_hits\n            own_nuke_canceled_by_game_end\n            own_nuke_canceled_by_nuke\n            own_nuke_canceled_by_opponent\n            own_nuke_canceled_by_penalty\n            own_nuke_canceled_by_resupply\n            own_nuke_canceled_by_team\n            penalties\n            penalty_downtime\n            rapid_fires\n            resupply_downtime\n            resupply_lives\n            resupply_shots\n            score\n            self_deac\n            self_deac_during_rapid\n            self_hit\n            self_hit_during_rapid\n            self_missile\n            self_missile_during_rapid\n            self_resupply_lives\n            self_resupply_shots\n            shot_3hit\n            shot_3hit_during_rapid\n            shot_base\n            shot_opponent\n            shot_opponent_during_rapid\n            shot_team\n            shot_team_during_rapid\n            shots\n            shots_fired\n            shots_fired_during_rapid\n            shots_hit\n            shots_hit_during_rapid\n            sp_earned\n            sp_spent\n            state_time\n            team_deac_downtime\n            times_missiled\n            uptime\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query IfReplayExists($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n        }\n      }\n    "): (typeof documents)["\n      query IfReplayExists($tdfId: String!) {\n        game(where: { tdf_id: { _eq: $tdfId } }) {\n          id\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query SocialSimpleScorecards(\n        $start: timestamptz!\n        $end: timestamptz!\n        $centers: [bigint!]\n      ) {\n        scorecards(\n          where: {\n            type: { _eq: \"social\" }\n            game_datetime: { _gte: $start, _lte: $end }\n            center_id: { _in: $centers }\n          }\n        ) {\n          id\n          player_id\n          player {\n            id\n            ipl_id\n            player_name\n          }\n          game {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: game_length\n          }\n          position\n          score\n          mvp: mvp_points\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    "): (typeof documents)["\n      query SocialSimpleScorecards(\n        $start: timestamptz!\n        $end: timestamptz!\n        $centers: [bigint!]\n      ) {\n        scorecards(\n          where: {\n            type: { _eq: \"social\" }\n            game_datetime: { _gte: $start, _lte: $end }\n            center_id: { _in: $centers }\n          }\n        ) {\n          id\n          player_id\n          player {\n            id\n            ipl_id\n            player_name\n          }\n          game {\n            id\n            tdf_id: tdf_key\n            mission_start: game_datetime\n            mission_length: game_length\n          }\n          position\n          score\n          mvp: mvp_points\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getSimpleScorecardByEventId($eventId: bigint!) {\n        scorecards(where: { event_id: { _eq: $eventId } }) {\n          player_id\n          player {\n            player_name\n          }\n          game {\n            center_id\n            duration\n            game_datetime\n            game_length\n            game_name\n          }\n          position\n          score\n          mvp_points\n          mvp_details\n          hit_diff\n          shot_opponent\n          times_zapped\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    "): (typeof documents)["\n      query getSimpleScorecardByEventId($eventId: bigint!) {\n        scorecards(where: { event_id: { _eq: $eventId } }) {\n          player_id\n          player {\n            player_name\n          }\n          game {\n            center_id\n            duration\n            game_datetime\n            game_length\n            game_name\n          }\n          position\n          score\n          mvp_points\n          mvp_details\n          hit_diff\n          shot_opponent\n          times_zapped\n          medic_hits\n          accuracy\n          shot_team\n        }\n      }\n    "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;